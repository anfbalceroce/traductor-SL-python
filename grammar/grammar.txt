START,programa ID HEADER MAIN
START,HEADER MAIN
HEADER,const CONST_LIST HEADER
HEADER,tipos TIPOS_LIST HEADER
HEADER,var VAR_LIST HEADER
HEADER,
VAR_LIST,VAR NEXT_VAR
VAR,ID_LIST : TIPO SEP_OPT
ID_LIST,ID NEXT_ID
NEXT_ID,", ID NEXT_ID"
NEXT_ID,
NEXT_VAR,VAR NEXT_VAR
NEXT_VAR,
CONST_LIST,CONST NEXT_CONST
CONST,ID = EXPRESION SEP_OPT
NEXT_CONST,CONST NEXT_CONST
NEXT_CONST,
TIPOS_LIST,TIPO_P NEXT_TIPO_P
TIPO_P,ID : TIPO SEP_OPT 
NEXT_TIPO_P,TIPO_P NEXT_TIPO_P
NEXT_TIPO_P,
SEP_OPT,;
SEP_OPT,
SENT_SEP,;
SENT_SEP,
MAIN,inicio SENTENCIAS fin SUB
SENTENCIAS,SENTENCIA SENT_SEP NEXT_SENTENCIA
SENTENCIAS,
NEXT_SENTENCIA,SENTENCIA SENT_SEP NEXT_SENTENCIA
NEXT_SENTENCIA,
SENTENCIA,ID ASSNG_CALL
ASSNG_CALL,( PARAMS )
ASSNG_CALL,ID_EXTEND ASSINGMENT
SENTENCIA,si ( EXPRESION ) { SENTENCIASIF SINO }
SENTENCIA,mientras ( EXPRESION ) { SENTENCIASIF }
SENTENCIA,repetir SENTENCIASIF hasta ( EXPRESION )
SENTENCIA,eval { caso ( EXPRESION ) SENTENCIASIF CASE SW_SINO }
SENTENCIA,desde FOR_START { SENTENCIASIF }
FOR_START,ID = NUM_EXPRESION FOR_END
FOR_END,hasta NUM_EXPRESION FOR_STEP
FOR_STEP,paso NUM_EXPRESION
FOR_STEP,
SINO,sino SINO_P
SINO_P,SENTENCIASNOIF SINO
SINO_P,si ( EXPRESION ) SINO_PP SINO
SINO_PP,SENTENCIASIF
SINO_PP,{ SENTENCIASIF SINO } SENT_SEP_SINO NEXT_SENTENCIA
SENT_SEP_SINO,;
SENT_SEP_SINO,
SINO,
SENTENCIASNOIF,SENTENCIANOIF SENT_SEP NEXT_SENTENCIA
SENTENCIANOIF,ID ASSNG_CALL
SENTENCIANOIF,mientras ( EXPRESION ) { SENTENCIASIF }
SENTENCIANOIF,repetir SENTENCIASIF hasta ( EXPRESION )
SENTENCIANOIF,eval { caso ( EXPRESION ) SENTENCIASIF CASE SW_SINO }
SENTENCIANOIF,desde FOR_START { SENTENCIASIF }
SENTENCIASIF,SENTENCIA SENT_SEP NEXT_SENTENCIA
CASE,caso ( EXPRESION ) SENTENCIASIF CASE
CASE,
SW_SINO,sino SENTENCIASIF
SW_SINO,
ASSINGMENT,= ASSINGMENT_P
ASSINGMENT_P,EXPRESION
ASSINGMENT_P,{ M_EXPRESION }
M_EXPRESION,M_TERM M_EXPRESION_P
M_EXPRESION,
M_EXPRESION_P,", M_TERM M_EXPRESION_P"
M_EXPRESION_P,
M_TERM,M_FACTOR
M_FACTOR,{ M_EXPRESION }
M_FACTOR,. . .
M_FACTOR,EXPRESION
EXPRESION,LOGIC_TERM LOGIC_EXPRESION_P
LOGIC_EXPRESION_P,or LOGIC_TERM LOGIC_EXPRESION_P
LOGIC_EXPRESION_P,
LOGIC_TERM,LOGIC_FACTOR LOGIC_TERM_P
LOGIC_TERM_P,and LOGIC_FACTOR LOGIC_TERM_P
LOGIC_TERM_P,
LOGIC_FACTOR,LOGIC_ELEMENT
LOGIC_FACTOR,not LOGIC_ELEMENT
LOGIC_ELEMENT,BOOL
LOGIC_ELEMENT,RELATION_EXPRESION
RELATION_EXPRESION,RELATION_TERM RELATION_EXPRESION_P
RELATION_EXPRESION_P,< RELATION_TERM RELATION_EXPRESION_P
RELATION_EXPRESION_P,> RELATION_TERM RELATION_EXPRESION_P
RELATION_EXPRESION_P,<= RELATION_TERM RELATION_EXPRESION_P
RELATION_EXPRESION_P,>= RELATION_TERM RELATION_EXPRESION_P
RELATION_EXPRESION_P,== RELATION_TERM RELATION_EXPRESION_P
RELATION_EXPRESION_P,<> RELATION_TERM RELATION_EXPRESION_P
RELATION_EXPRESION_P,
RELATION_TERM,NUM_EXPRESION
NUM_EXPRESION,NUM_TERM NUM_EXPRESION_P
NUM_EXPRESION_P,+ NUM_TERM NUM_EXPRESION_P
NUM_EXPRESION_P,- NUM_TERM NUM_EXPRESION_P
NUM_EXPRESION_P,
NUM_TERM,NUM_FACTOR NUM_TERM_P
NUM_TERM_P,* NUM_FACTOR NUM_TERM_P
NUM_TERM_P,/ NUM_FACTOR NUM_TERM_P
NUM_TERM_P,% NUM_FACTOR NUM_TERM_P
NUM_TERM_P,
NUM_FACTOR,NUM_FACTOR_P
NUM_FACTOR,+ NUM_FACTOR_P
NUM_FACTOR,- NUM_FACTOR_P
NUM_FACTOR_P,BASE_ELEMENT NUM_FACTOR_PP
NUM_FACTOR_PP,^ BASE_ELEMENT NUM_FACTOR_PP
NUM_FACTOR_PP,
BASE_ELEMENT,STRING
BASE_ELEMENT,NUM
BASE_ELEMENT,( EXPRESION )
BASE_ELEMENT,CALL
SUB,subrutina ID ( ARGS ) RETURN
ARGS,REF ID_LIST : TIPO NEXT_ARG
ARGS,
NEXT_ARG,; REF ID_LIST : TIPO NEXT_ARG
NEXT_ARG,
REF,ref
REF,
RETURN,retorna TIPO SUBHEADERR
RETURN,SUBHEADER
SUBHEADER,const CONST_LIST SUBHEADER
SUBHEADER,tipos TIPOS_LIST SUBHEADER
SUBHEADER,var VAR_LIST SUBHEADER
SUBHEADER,SUBBODY
SUBBODY,inicio SUBSENTENCIAS fin SUB
SUBHEADERR,const CONST_LIST SUBHEADERR
SUBHEADERR,tipos TIPOS_LIST SUBHEADERR
SUBHEADERR,var VAR_LIST SUBHEADERR
SUBHEADERR,SUBBODYR
SUBBODYR,inicio SUBSENTENCIAS retorna ( EXPRESION ) fin SUB
SUBSENTENCIAS,SENTENCIA SENT_SEP NEXT_SENTENCIA
SUBSENTENCIAS,
SUB,
TIPO,TIPOS
TIPO,TYPE_VECTOR
TIPO,TYPE_MATRIX
TIPO,REGISTER
TIPOS,cadena
TIPOS,logico
TIPOS,numerico
TIPOS,ID
TYPE_VECTOR,vector [ V_LEN
V_LEN,NUM_EXPRESION ] TIPO
V_LEN,* ] TIPO
TYPE_MATRIX,matriz [ DIMENTION_LIST
DIMENTION_LIST,* NEXT_DIMENTION ] TIPO
DIMENTION_LIST,DIMENTION NEXT_DIMENTION ] TIPO
NEXT_DIMENTION,", NEXT_DIMENTION_P"
NEXT_DIMENTION,
NEXT_DIMENTION_P,* NEXT_DIMENTION
NEXT_DIMENTION_P,DIMENTION NEXT_DIMENTION
DIMENTION,ID
DIMENTION,NUM
REGISTER,registro { VAR_LIST }
BOOL,TRUE
BOOL,FALSE
BOOL,SI
BOOL,NO
ID_EXTEND,IDS_OPTIONS ID_EXTEND
ID_EXTEND,
IDS_OPTIONS,[ NUM_EXPRESION MATRIX ]
IDS_OPTIONS,. ID
CALL,ID CALL_OPT
CALL_OPT,( PARAMS )
CALL_OPT,ID_EXTEND
PARAMS,EXPRESION NEXT_PARAM
PARAMS,
NEXT_PARAM,", EXPRESION NEXT_PARAM"
NEXT_PARAM,
MATRIX,", NUM_EXPRESION MATRIX"
MATRIX,
